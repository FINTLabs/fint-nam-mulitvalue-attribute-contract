package si.genlan.nam.idp

import com.novell.nidp.common.authority.UserAuthority
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.NodeList
import spock.lang.Specification

import javax.xml.xpath.XPathConstants
import javax.xml.xpath.XPathFactory

class SamlResponseServiceSpec extends Specification {

    private SamlResponseService samlResponseService;

    void setup() {
        samlResponseService = new SamlResponseService(new Properties());
    }

    def "Saml response should be decoded"() {
        given:
        def samlResponse = ""
        def xPath = XPathFactory.newInstance().newXPath();

        when:
        def document = samlResponseService.decodeSAMLResponse(samlResponse)


        then:
        document
        //displayNameClainValue == "Ola Norman"
        //print(displayNameClainValue);
    }

    def "Add Saml to List"() {
        given:
        def samlResponse = ""
        def xPath = XPathFactory.newInstance().newXPath();
        def matchingAttribute = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname";
        def NodeList nodes = null

        when:
        def document = samlResponseService.decodeSAMLResponse(samlResponse)
        def displayNameClainValue = xPath
                .compile("//Attribute[@Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/roles\"]")
                .evaluate(document, XPathConstants.STRING)
        print(displayNameClainValue);
        print(document.getChildNodes().getLength());

        nodes = (NodeList) xPath.compile("//Attribute/*").evaluate(document, XPathConstants.NODESET)
        print("\nNodeLength " + nodes.getLength())
        for(int i = 0; i < nodes.getLength(); i++)
        {

            Element e = (Element) nodes.item(i).getParentNode()
            String attributeValue = nodes.item(i).getTextContent()
            String attributeName = e.getAttribute("Name");

            print("\nNodeName: "+ attributeName + " Attribute Value: " + attributeValue);

            if(attributeName.equals(matchingAttribute)) {
                //UpdateUserStoreBySamlResponseContract.samlRequestVariableList.getSamlRequests().add(new SamlRequest(attributeValue, samlResponse));
                print("Putting in");
                break;
            }
            print("\nend " + i);
        }
        //def updateUserStore = new UpdateUserStoreBySamlResponseContract();
        then:
        print("done")
    }
}
